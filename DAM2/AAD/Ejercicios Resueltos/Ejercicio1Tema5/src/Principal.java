
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Juanro49
 */
public class Principal extends javax.swing.JFrame {

    Connection conexion;
    Statement sentencia;
    boolean correcto = true;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        PrepararBaseDatos();
    }
    
    void PrepararBaseDatos()
    {
    
        
        try
        {
            //1.- Cargar el controlador
            String controlador="com.mysql.jdbc.Driver";
            Class.forName(controlador).newInstance();
            
            //2.- Crear el objeto conexión.
            String DBURL="jdbc:mysql://localhost/manempsa";
            String usuario="root";
            String password="";
            
            conexion = DriverManager.getConnection(DBURL,usuario,password);
            
            //3.- Crear el objeto sentencia.
            sentencia = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
        }
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane, "No se ha podido conectar a la base de datos, comprueba que esté activa (activar XAMP)", "Error al iniciar la aplicación", WIDTH, null);
            correcto = false;
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null,"Error al cargar el controlador.");
            correcto = false;
        }     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnInforme = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnServicios = new javax.swing.JButton();
        txtDni = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnInforme.setText("Informe Agrupado");
        btnInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInformeActionPerformed(evt);
            }
        });

        btnImprimir.setText("Impresión directa del informe");
        btnImprimir.setActionCommand("");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnServicios.setText("Servicios Trabajadores");
        btnServicios.setActionCommand("");
        btnServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiciosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(btnInforme)
                .addGap(37, 37, 37)
                .addComponent(btnImprimir)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnServicios)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(!correcto)
        {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try
        {
            conexion.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, "No se puede cerrar la base de datos");
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInformeActionPerformed
        try
        {
            String rutaArchivo = "ListadoServicios.jrxml"; 
            System.out.println("Cargando desde: " + rutaArchivo);
            
            if (rutaArchivo == null)
            { 
                System.out.println("No se encuentra el archivo."); 
                System.exit(0); 
            } 

            //Reporte diseñado y compilado con iReport 
            JasperReport masterReport = JasperCompileManager.compileReport(rutaArchivo);
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport,null,conexion); 

            //Se lanza el Viewer de Jasper, no termina aplicación al salir 
            JasperViewer jviewer = new JasperViewer(jasperPrint,false); 
            jviewer.setTitle("Listado de Servicios"); 
            jviewer.setVisible(true);

        } catch (JRException ex)
        {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnInformeActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        try
        {
            String rutaArchivo = "ListadoServicios.jrxml"; 

            //Reporte diseñado y compilado con iReport 
            JasperReport masterReport = JasperCompileManager.compileReport(rutaArchivo);                   
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport,null,conexion); 

            JasperPrintManager.printReport(jasperPrint, true);

        } catch (JRException ex)
        {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, "Error al mostrar informe." +ex);
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiciosActionPerformed
        try
        {
            String rutaArchivo = "serviciosJuan.jrxml"; 
            System.out.println("Cargando desde: " + rutaArchivo);
            
            if (rutaArchivo == null)
            { 
                System.out.println("No se encuentra el archivo."); 
                System.exit(0);
            } 

            Map parametros = new HashMap();  
            parametros.put("dni", txtDni.getText());

            //Reporte diseñado y compilado con iReport 
            JasperReport masterReport = JasperCompileManager.compileReport(rutaArchivo);
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport,parametros,conexion); 

            //Se lanza el Viewer de Jasper, no termina aplicación al salir 
            JasperViewer jviewer = new JasperViewer(jasperPrint,false); 
            jviewer.setTitle("Listado de Servicios"); 
            jviewer.setVisible(true);

     } catch (JRException ex)
     {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
     }

    }//GEN-LAST:event_btnServiciosActionPerformed
                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnInforme;
    private javax.swing.JButton btnServicios;
    private javax.swing.JTextField txtDni;
    // End of variables declaration//GEN-END:variables
}
